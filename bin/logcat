#!/usr/bin/env python

import kafka
import kafka.common
import argparse
import uuid
import json
import sys


class Message(object):
    def __init__(self, data):
        self.json = json.loads(data.decode('utf-8'))

    def valid(self):
        return 'eva' in self.json['tags']

    def name(self):
        return self.json['marathon_app_id']

    def host(self):
        return self.json['host']

    def container_id(self):
        return self.json['container_id'][:8]

    def log_level(self):
        return self.json['log_level']

    def text(self):
        if 'eva_message' in self.json:
            return self.json['eva_message']
        return self.json['short_message']

    def timestamp(self):
        return self.json['@timestamp']


if __name__ == '__main__':
    helptext = "This utility concatenates EVA logs from a Kafka server, and outputs them to stdout."

    parser = argparse.ArgumentParser(description=helptext)
    parser.add_argument('--broker', type=str, action='append', required=True,
                        help='Which broker to publish the message to. Can be specified multiple times.')
    parser.add_argument('--topic', type=str, default='mesos.logstash',
                        help='The Kafka topic to which log events are published.')
    parser.add_argument('--from-beginning', default=False, action='store_true',
                        help='Replay all logs, starting from the beginning of Kafka\'s cache.')
    args = parser.parse_args()

    consumer = kafka.KafkaConsumer(args.topic,
                                   bootstrap_servers=args.broker,
                                   group_id=str(uuid.uuid4()),
                                   value_deserializer=lambda m: Message(m))

    if args.from_beginning:
        consumer.poll()
        consumer.seek_to_beginning()

    try:
        for msg in consumer:
            message = msg.value
            if not message.valid():
                continue
            output = u"%(timestamp)s %(host)s %(container_id)s %(name)s %(log_level)s: %(text)s\n" % {
                'timestamp': message.timestamp(),
                'host': message.host(),
                'container_id': message.container_id(),
                'name': message.name(),
                'log_level': message.log_level(),
                'text': message.text(),
            }
            sys.stdout.write(output)
            sys.stdout.flush()
    except KeyboardInterrupt:
        pass
    except StopIteration:
        pass
